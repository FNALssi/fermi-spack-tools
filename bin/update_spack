#!/bin/sh

set +e
pkglist=$1
export SPACK_ROOT=$2
export PATH=$SPACK_ROOT/bin:$PATH

usage() {
   echo "command: $0 $*"
   echo usage: $0 worklist-file SPACK_ROOT
}

case "${pkglist}" in
*/workfile) ;;
*) usage "$@"; exit 1;;
esac

spackbindir=`echo $0 | sed -e 's;update_spack;;'`

export PATH=$SPACK_ROOT/bin:$spackbindir:$PATH

printf "arch: "
spack arch

if [ ! -d $SPACK_ROOT ]
then
    d=$(dirname $SPACK_ROOT)
    d=$(dirname $d)
    d=$(dirname $d)
    make_spack -u $d
    # save the rest for later...
    exit
fi

if [ ! -r ${pkglist}.done ]
then 
    :> ${pkglist}.done
fi

if [ ! -r ${pkglist}.failed ]
then 
    :> ${pkglist}.failed
fi

cat ${pkglist} |
  while read what spec
  do
     echo "doing: $what $spec"
     case $what in
     i) 
        # install a spec by name/hash
        spack find "$spec" || python $SPACK_ROOT/bin/spack buildcache install -o -m "$spec" ;;
     e) 
        # install an environment by .../envname.spack.lock file or URL
        ename=$(basename $spec | sed -e 's/.spack.lock$//')
        case "x$spec" in 
        xhttps:*)  
            d=/tmp/d$$
            mdkir $d
            localf=$d/$(basename $spec)
            wget -o $localf "$spec"
            ;;
        *)  localf="$spec"
            ;;
        esac
        spack env create $ename $localf 
        spack --env=$ename install
        ;;
     r) 
        # remove a directory tree
        case "x$spec" in
        x|x/*) echo "skipping empty or absolute r entry" >&2 ;;
        x*)    cd $SPACK_ROOT/../../.. && rm -rf "$spec";;
        esac
        ;;
        
     t) 
        # unpack a tarfile
        cd $SPACK_ROOT/../../.. && tar xzf $spec; spack reindex;;
     u) 
        # uninstall something
        spack uninstall "$spec";;

     U) 
        # run un_ups_to_spack
        un_ups_to_spack;; 
     *) 
        # who knows?
        echo "unknown entry: $what $spec" >&2;;
     esac

     [ $? == 0 ] && echo "$what $spec" >> ${pkglist}.done || echo "$what $spec" >> ${pkglist}.failed

  done

rm -f ${pkglist} /tmp/d$$
