#!/usr/bin/env python3

import os
import sys
import json

# we want to use the ruamel.yaml package from spack
sys.path.insert(1, "%s/lib/spack/external" % os.environ["SPACK_ROOT"])
sys.path.insert(1, "%s/lib/spack" % os.environ["SPACK_ROOT"])

import ruamel.yaml
import spack.spec
import spack.store
import spack.hooks

try:
    from spack.architecture import sys_type
    def get_tuple():
        platform = sys_type()
        tfl = platform.split("-")
        return tfl
except:
    import spack.platforms
    def get_tuple():
        host_platform = spack.platforms.host()
        host_os = host_platform.operating_system('default_os')
        host_target = host_platform.target('default_target')
        return (str(host_platform), str(host_os), str(host_target))


def run_command(s):
    print("--> running: %s" % s)
    os.system(s)


def get_compiler():
    f = os.popen("spack compiler list", "r")
    for line in f:
        comp = line
    f.close()
    return comp.strip()

def make_repo_if_needed( name ):
    f = os.popen("spack repo list","r")
    for line in f:
        if line.find(name+" ") == 0:
             f.close()
             return
    f.close()
    rd="%s/var/spack/repos/%s" % (os.environ["SPACK_ROOT"], name)
    run_command("spack repo create %s %s" % (rd, name))
    run_command("spack repo add --scope=site %s" % rd)
    return rd


def make_recipe_if_needed( namespace, name, pathvar='IGNORE'):

    res = run_command('spack info %s > /dev/null 2>/dev/null' % name);
    if res == 0:
         return

    rd = make_repo_if_needed(namespace)

    if os.path.exists( "%s/packages/%s/package.py" % (rd, name)):
         return

    f = os.popen("EDITOR=/bin/ed spack create -N %s --template generic --name %s" % (namespace, name), "w")
    dict = {
       'name': name, 
       'NAME': name.upper().replace('-','_'), 
       'PATHVAR' : pathvar
    }
    f.write("""
g/FIXME:/d
/^class/a
    '''declare-simple %(name)s locally declared bundle of files you do not really build'''
.
/homepage *=/s;=.*;= 'https://nowhere.org/nosuch/';
/url *=/s;=.*;= 'https://nowhere.org/nosuch'
/url *=/+2,\$d
a

    def install(self, spec, prefix):
        raise NotImplementedError

    def setup_environment(self, spack_env, run_env):
        run_env.set('%(NAME)s_DIR', self.prefix)
        run_env.prepend_path('%(PATHVAR)s', self.prefix)
        spack_env.set('%(NAME)s_DIR', self.prefix)
        spack_env.prepend_path('%(PATHVAR)s', self.prefix)
.
wq
""" % dict)
    f.close()


def make_spec(name, version):

    curdir = os.getcwd()
    specfile = "%s/.spack/spec.yaml" % curdir
    try:
       os.mkdir(".spack")
    except:
       pass

    tfl = get_tuple()
    platform = '-'.join(tfl)

    namespace = "local"
    make_recipe_if_needed(namespace, name, 'PATH')
    compiler = get_compiler()
    compiler_l = compiler.split("@")

    spec = {
        "spec": [
            {
                name: {
                    "version": version,
                    "arch": {
                        "platform": tfl[0],
                        "platform_os": tfl[1],
                        "target": tfl[2],
                    },
                    "compiler": {
                        "name": compiler_l[0],
                        "version": compiler_l[1],
                    },
                    "namespace": namespace,
                    "parameters": {},
                }
            }
        ]
    }

    sf = open(specfile, "w")
    sf.write(ruamel.yaml.dump(spec, default_style="1"))
    sf.close()

    st = open(specfile, "r")
    sp = spack.spec.Spec.from_yaml(st)
    hashstr = sp.dag_hash()

    properdir = "%s/../../../%s/%s/%s-%s-%s" % (os.environ['SPACK_ROOT'], name, version, platform, compiler.replace('@','-'), hashstr)
    
    if not os.path.exists(os.path.dirname(properdir)):
        os.makedirs(os.path.dirname(properdir))
    os.rename(curdir, properdir)

    # add spec to index directly -- 
    # NOTE: should do some sort of locking here
    #
    dbpath = "%s/../../../.spack-db/index.json" % os.environ['SPACK_ROOT']
    dbf = open(dbpath, 'r')
    db = json.load(dbf)
    dbf.close()
    # need to not have a list at that layer unlike spec.yaml...
    if (isinstance(spec['spec'], list)):
        spec['spec'] = spec['spec'][0]
    db['database']['installs'][hashstr] = spec
    dbf = open(dbpath, 'w')
    json.dump(db,dbf)
    dbf.close()

    run_command("spack reindex")

make_spec(sys.argv[1], sys.argv[2])
