#!/bin/sh


case "x$0" in
x*/*) dir=`echo $0 | sed -e 's;\(.*\)/\([^/]*\);\1/..;'` ;;
x*)   dir=.. ;;
esac

os=${2:-`spack arch -o`}

cvmfs_area=/cvmfs/fermilab.opensciencegrid.org/packages/external
src=$dir/templates/packagelist
optf=$dir/templates/package_opts
#dst=$1/etc/spack/$os/packages.yaml
dst=$1/etc/spack/packages.yaml

# packages to make not buildable...

force_system='^(bdftopf|bzip2|damageproto|diffutils|expat|findutils|font-util|gdbm|gettext|glew|libbsd|libc|libdrm|libffi|libfontenc|libgcrypt|libice|libjpeg-turbo|libpciaccess|libpthread-stubs|libseigsegv|libsm|libx11|libxau|libxcb|libxdamage|libxdmcp|libxext|libxfixes|libxfont|libuuid|libxxmu|libxpm|libxrandr|libxrender|libxshmfence|libxt|libxv|libxvmc|lbixxf86vm|lz4|mesa|mesa-glu|ncurses|openssl|openssh|pcre|pcre2|pkgconf|pkg-config|tar|tcl|texlive|tk|unzip|util-macros|xextproto|xproxymanagementprotocol|xrandr|xtrans|xz|zlib)$'

no_devel='^(diffutils|findutils|pkg-config|pkgconfig|tar)$'

force_x86_64="(*proto|asciidoc|autoconf|autogen|automake|binutils|bison|bzip2|cmake|conv|curl|damageproto|davix|diffutils|environment-modules|expat|findutils|fixesproto|flex|font-util|fontconfig|font-util|libfontenc|libxfont|mkfontdir|mkfontscale|freeglut|freetype|gdb|gdbm|gettext|git|gl2ps|glew|gmake|help2man|icu4c|jemalloc|libbsd|libdrm|libedit|libevent|libffi|libice|libiconv|libjpeg|libjpeg-turbo|libgcrypt|libpciaccess|libpng|libpthread-stubs|libsigsegv|libsm|libtool|libuuid|libx11|libxau|libxcb|libxdamage|libxdmcp|libxext|libxfixes|libxft|libxi|libxmu|libxpm|libxrandr|libxrender|libxshmfence|libxt|libxv|libxvmc|libxxf86vm|libyaml|lua|lz4|m4|matplotlib|mesa|mesa-glu|mpich|mysql|nasm|ncurses|openblas|openssl|patchelf|pcre|pcre2|perl|pkgconf|pkg-config|readline|sqlite|swig|tar|tcl|texinfo|texlive|tk|unzip|util-macros|xxhash|xz|zlib)"

teeit="cat"
#debugging
#teeit="tee /dev/tty"

runversion() {
   # try to get version by running executable --version
   # in some cases this works due to error messages...
   if [  "$1" != '' ]
   then
       cmd="$1"
       if [ "$cmd" = "python" ]
       then
           cmd=`ls /usr/bin/python* | grep -v config | tail -1`
       fi
       ($cmd --version || $cmd -v) < /dev/null 2>&1 | 
          strings | 
          sed -e 's/\+*//' -e 's/64.bit//' | 
          grep -i $1 | 
          egrep -iv 'error:|for help|not found|illegal|invalid|usage:|--version|-v' |
          head -1 | $teeit |
          perl -pe 's{(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|/).*}{};' |
          sed -e "s/$1//ig" -e 's/-[0-9].*//'  | $teeit | 
          sed -e 's/^.*[^0-9.]\([0-9][0-9]*\.[0-9.kp]*\).*$/\1/' | $teeit
   fi
}

# define getv depending on platform 
# for linux distros, prefer the apt/rpm version...
case `uname -s` in
Linux)
    case `lsb_release -i` in
    *Ubuntu)
        : ubuntu case
        getv() {
           apt list $1 2>/dev/null | grep '\[installed\]'| sed -e 's/[^ ]* //' -e 's/.*://' -e 's/[+-].*//' || runversion $1
        }
    ;;
    *Scientific*|*Centos*|*RedHat*)
        if [ x$RPMCACHE != x ]
        then
        getv() {
           grep "^$1-[0-9]" $RPMCACHE | tail -1 | grep -v 'is not installed' | 
              sed -e 's/.*-\([0-9][0-9.kp]*\)-[0-9][0-9.]*\..*/\1/' ||
              runversion $1
        }
        else
        getv() {
           rpm -q $1 | tail -1 | grep -v 'is not installed' | 
              sed -e 's/.*-\([0-9][0-9.kp]*\)-[0-9][0-9.]*\..*/\1/' ||
              runversion $1
        }
        fi
        ;;
    esac
;;
*)
    : generic / darwin case
    getv() {
       case x$1 in
       xautotools)
           runversion automake
           ;;
       xlibtool) 
           # looks like a library, but its not...
           runversion $1
           ;;
       xtcl)
           # its tclsh not tcl, AND it doesn't take --version...
           echo info patchlevel | tclsh
           ;;
       xlib*) 
           otool -L /usr/lib/$1 | grep "$1.*current version" |  sed -e 's/.*version//' -e 's/)//'
           ;;
       x*)
           runversion $1
           ;;
       esac
    }
    ;;
esac

getv2() {
  # more robust getv that does the generic getv, but also tries runversion
  # This has some chance of finding, say, UPS packges you have setup, but
  # does help with the whole pkgconf/pkg-config silliness..


  # some xyzproto packages are rolled up into the xorgproto RPM, but have documented versions...
  case "$2" in
  *proto*) 
      ff=/usr/share/doc/xorgproto/$2.txt  
      [ -r $ff ] && x=`grep Version $ff | head -1 | sed -e 's/.*Version //'` 
  ;;
  esac
  if [ "$x" = "" ]
  then
      pkf="/usr/share/pkgconfig/$lp.pc"
      if [ -r "$pkf" ]
      then
          x=`grep Version: $pkf | sed -e 's/Version: //'`
      fi
  fi
  if [ "$x" = "" ]
  then
      x=`grep $1 $dir/templates/preferred_versions | sed -e 's/.*@//'`
  fi
  if [ "$x" = "" ]
  then
      # check if the spack package name is an executable we can get a version from
      x=`runversion $2`
  fi
  if [ "$x" = "" ]
  then
      x=`getv $1`
  fi
  if [ "$x" = "" ] 
  then
      x=`runversion $1`
  fi
  if [ "$x" = "" ]
  then
      x=`grep $1 $dir/templates/default_versions | sed -e 's/.*@//'`
  fi
  echo $x | sed -e 's/ .*//'
}

get_cvmfs_spack_versions() {
  #printf "get_cvmfs_spack_versions($1): " > /dev/tty
  csr=${cvmfs_area}/spack/current/NULL/ 
  SPACK_ROOT=$csr $csr/bin/spack find $1 | grep -v '^[=-]' | sed -e 's/[^ ]*@//'| sort -u # | tee /dev/tty
}

mkdir -p `dirname $dst`

compiler=""
if [ "x`getv2 gcc`" != x ]
then
    compiler="gcc@`getv2 gcc gcc`"
    comp="%$compiler"
else
    comp=""
fi

compiler2=""

if [ "x`getv2 clang clang`" != x ]
then
    compiler2="clang@`getv2 clang clang`"
fi
export compiler
export compiler2

echo "make_packages_yaml: INFO: creating $dst"
exec 3>$dst
echo "packages:" >&3

cat <<EOF >&3
  all:
    providers:
      awk:
        - gawk
      blas:
        - openblas
      D:
        - ldc
      daal:
        - intel-daal
      elf:
        - elfutils
      fftw-api:
        - fftw
      flame:
        - libflame
      fuse:
        - libfuse
      gl:
        - glx
      glu:
        - mesa-glu
      golang:
        - go
      go-external-or-gccgo-bootstrap:
        - go-bootstrap
      iconv:
        - libc
      ipp:
        - intel-ipp
      java:
        - openjdk
      jpeg:
        - libjpeg-turbo
      lapack:
        - openblas
      libglx:
        - mesa+glx
      libllvm:
        - llvm
      libosmesa:
        - mesa+osmesa
      lua-lang:
        - lua
      luajit:
        - lua-luajit-openresty
      mariadb-client:
        - mariadb-c-client
      mkl:
        - intel-mkl
      mpe:
        - mpe2
      mpi:
        - openmpi
      mysql-client:
        - mariadb-client
      opencl:
        - pocl
      onedal:
        - intel-oneapi-dal
      pbs:
        - torque
      pil:
        - py-pillow
      pkgconfig:
        - pkg-config
      rpc:
        - libc
      scalapack:
        - netlib-scalapack
      sycl:
        - libaec
      tbb:
        - intel-tbb-oneapi
      unwind:
        - libunwind
      uuid:
        - libuuid
      xxd:
        - xxd-standalone
      yacc:
        - bison
      ziglang:
        - zig
  libiconv:
    buildable: false
  util-macros:
    buildable: false
EOF

# don't put the compiler tag in, we may not want to build
# with the system compiler by default...
#if [ "x$compiler" != x ]
#then
#    echo "  all:"                     >&3
#    echo "    compiler: [$compiler]"  >&3
#fi

for p in `cat $src`
do
    did_externals=false

    case $p in
    *:*:*) 
           dv=$(echo $p | sed -e 's/.*:.*:\(.*\)/\1/') 
           spp=$(echo $p | sed -e 's/.*:\(.*\):.*/\1/')
           p=$(echo $p | sed -e 's/\(.*\):.*:.*/\1/') 
           ;;
    *)
           spp=`echo $p | tr '[A-Z]' '[a-z]' | sed -e 's/imagemagick/image-magick/' -e 's/^python-/py-/' -e 's/pkgconfig/pkgconf/' -e 's/glibc/libc/' -e 's/libdb/berkeley-db/'`
           dv="$spp"'-devel'
    esac

    # if its a wildcarded rpm name, look for it
    case "$p" in
    *\**) 
         p=`rpm -qa | grep "$p" | tail -1` 
         dv=`rpm -qa | grep "$dv" |  tail -1`
         ;;
    esac

    # debug individual packages here
    # debug_pkg=gettext
    debug_pkg=
    if [ "$debug_pkg" != "" ] 
    then
        if [ "$spp" = "$debug_pkg" ]
        then
            set -x
        else
            set +x
        fi
    fi

    # some packages aren't on SL7 but are on SL8...
    if [ "$os" = "scientific7" -a \( "$dv" = "z3-devel" -o "$spp" = "pkg-config" \) ]
    then
        continue
    fi

    # find local version if any...
    v=`getv2 $p $spp`
    # also find any cvmfs versions
    cvmfsversions=`get_cvmfs_spack_versions $spp`
    if [ "x$v" = x ]
    then
        if [ "$spp" = "$dv" ] || rpm -q "$dv"  > /dev/null 
        then
            echo "Notice: no devel headers/libraries found for package $p"
            echo "May want to install rpm: $p"
        else
            echo "Notice: no devel headers/libraries found for package $p"
            echo "May want to install rpms: $spp and  $dv"
        fi
        if [ "x$cvmfsversions" = x ]
        then
            echo "Notice: no system version or cvmfs versions found for package $p"
            # also no cvmfs versions, so skip...
            continue
        fi
    fi

    # check for installed devel rpm, otherwise warn

    echo "  $spp:"               >&3
    if echo $spp | egrep "$force_x86_64" > /dev/null
    then
        echo "    target:"     >&3
        echo "      - x86_64"     >&3
        echo "    compiler:" >&3
        [ -z "$compiler"  ] || echo "      - $compiler" >&3
        [ -z "$compiler2" ] || echo "      - $compiler2" >&3
    fi

    sysprefix='/usr'
    # mpich is goofy on RedHat/Centos
    case "$p" in
    mpich-3*)
        tp=`echo $p | sed -e 's/\([0-9]\)-.*/\1/'`
        sysprefix="/usr/lib64/$tp/" 
        ;;
    esac

    #variants from known variants list
    opts=`grep "^$spp[ \t]" $optf | sed -e "s/^$spp[ \t]*//"`

    #dependencies, one needed so far on gettext
    if [ "$spp" = "gettext" ]
    then
        deps=" ^libc"
    else
        deps=""
    fi

    if [ "x$v" != x ]
    then 

    # use the right external syntax based on spack version in path
    case $SPACK_ROOT in
    *rollout*)
        echo "    paths:"           >&3
        echo "      \"${spp}$opts @$v $comp$deps\": $sysprefix"    >&3
        ;;
    *)
        echo "    externals:" >&3
        echo "    - spec: \"${spp}$opts @$v $comp os=$os$deps\"" >&3
        echo "      prefix: $sysprefix" >&3
    esac

    did_externals=true

    fi

    for v in $cvmfsversions
    do
        #printf "cvmfs $spp $v $os: " > /dev/tty
        # should get info from spack here, not this way...
        cprefix=`ls -d ${cvmfs_area}/$spp/$v/* 2>/dev/null | grep $os | head -1`

        if [ "x$cprefix" = "x" ]
        then
            continue
        fi

        # if we have it in cvmfs, use that one
        case $SPACK_ROOT in
        *rollout*)
            $did_externals ||
            echo "    paths:"           >&3
            echo "      \"$spp @$v $comp$deps\": $cprefix"    >&3
            ;;
        *)
            $did_externals ||
            echo "    externals:" >&3
            echo "    - spec: \"${spp}$opts @$v $comp os=$os$deps\"" >&3
            echo "      prefix: $cprefix" >&3
            ;;
        esac
        did_externals=true
    done

    if echo $spp | egrep "$force_system" > /dev/null
    then
        echo "    buildable: False"           >&3
    fi
done

