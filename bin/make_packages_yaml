#!/bin/sh


case "x$0" in
x*/*) dir=`echo $0 | sed -e 's;\(.*\)/\([^/]*\);\1/..;'` ;;
x*)   dir=.. ;;
esac

os=${2:-`spack arch -o`}

cvmfs_area=/cvmfs/fermilab.opensciencegrid.org/packages/external
src=$dir/templates/packagelist
optf=$dir/templates/package_opts
dst=$1/etc/spack/$os/packages.yaml

# packages to make not buildable
force_system='^(bdftopcf|damageproto|diffutils|expat|findutils|font-util|gdbm|gettext|libc|libfontenc|libice|libx11|libxau|libxcb|libxdamage|libxdmcp|libxext|libxfixes|libxfont|libxxmu|libxpm|libxrandr|libxrender|libxshmfence|libxt|libxv|libxvmc|libxxf86vm|mesa-glu|mkfontdir|mkfontscale|openssl|pkg-config|tar|tcl|tk|xextproto|xorg-server|xproto|xproxymanagementprotocol|xrandr|xtrans|zlib)$'

# packages to force target (instead of merely preferred)
force_x86_64='^(hwloc|libpciaccess|libsigsegv)$'

preferred_target=x86_64_v2

teeit="cat"
#debugging
#teeit="tee /dev/tty"

runversion() {
   # try to get version by running executable --version
   # in some cases this works due to error messages...
   if [  "$1" != '' ]
   then
       cmd="$1"
       if [ "$cmd" = "python" ]
       then
           cmd=`ls /usr/bin/python* | grep -v config | tail -1`
       fi
       ($cmd --version || $cmd -v) < /dev/null 2>&1 | 
          strings | 
          sed -e 's/\+*//' -e 's/64.bit//' | 
          grep -i $1 | 
          egrep -iv 'error:|for help|not found|illegal|invalid|usage:|--version|-v' |
          head -1 | $teeit |
          perl -pe 's{(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|/).*}{};' |
          sed -e "s/$1//ig" -e 's/-[0-9].*//'  | $teeit | 
          sed -e 's/^.*[^0-9.]\([0-9][0-9]*\.[0-9.kp]*\).*$/\1/' | $teeit
   fi
}

# define getv depending on platform 
# for linux distros, prefer the apt/rpm version...
case `uname -s` in
Linux)
    case `lsb_release -i` in
    *Ubuntu)
        : ubuntu case
        getv() {
           apt list $1 2>/dev/null | grep '\[installed\]'| sed -e 's/[^ ]* //' -e 's/.*://' -e 's/[+-].*//' || runversion $1
        }
    ;;
    *Scientific*|*Centos*|*CentOS*|*RedHat*|*Alma*)
        if [ x$RPMCACHE != x ]
        then
        getv() {
           grep "^$1-[0-9]" $RPMCACHE | tail -1 | grep -v 'is not installed' | 
              sed -e 's/.*-\([0-9][0-9.kp]*\)-[0-9][0-9.]*\..*/\1/' ||
              runversion $1
        }
        else
        getv() {
           rpm -q $1 | tail -1 | grep -v 'is not installed' | 
              sed -e 's/.*-\([0-9][0-9.kp]*\)-[0-9][0-9.]*\..*/\1/' ||
              runversion $1
        }
        fi
        ;;
    esac
;;
*)
    : generic / darwin case
    getv() {
       case x$1 in
       xautotools)
           runversion automake
           ;;
       xlibtool) 
           # looks like a library, but its not...
           runversion $1
           ;;
       xtcl)
           # its tclsh not tcl, AND it doesn't take --version...
           echo info patchlevel | tclsh
           ;;
       xlib*) 
           otool -L /usr/lib/$1 | grep "$1.*current version" |  sed -e 's/.*version//' -e 's/)//'
           ;;
       x*)
           runversion $1
           ;;
       esac
    }
    ;;
esac

getv2() {
  # more robust getv that does the generic getv, but also tries runversion
  # This has some chance of finding, say, UPS packges you have setup, but
  # does help with the whole pkgconf/pkg-config silliness..


  # some xyzproto packages are rolled up into the xorgproto RPM, but have documented versions...
  case "$2" in
  *proto*) 
      ff=/usr/share/doc/xorgproto/$2.txt  
      [ -r $ff ] && x=`grep Version $ff | head -1 | sed -e 's/.*Version //'` 
  ;;
  esac
  if [ "$x" = "" ]
  then
      pkf="/usr/share/pkgconfig/$2.pc"
      if [ -r "$pkf" ]
      then
          x=`grep Version: $pkf | sed -e 's/Version: //'`
      fi
  fi
  if [ "$x" = "" ]
  then
      x=`grep $1 $dir/templates/preferred_versions | sed -e 's/.*@//'`
  fi
  if [ "$x" = "" ]
  then
      # check if the spack package name is an executable we can get a version from
      x=`runversion $2`
  fi
  if [ "$x" = "" ]
  then
      x=`getv $1`
  fi
  if [ "$x" = "" ] 
  then
      x=`runversion $1`
  fi
  if [ "$x" = "" ]
  then
      x=`grep $1 $dir/templates/default_versions | sed -e 's/.*@//'`
  fi
  echo $x | sed -e 's/ .*//'
}

get_cvmfs_spack_versions() {
  #printf "get_cvmfs_spack_versions($1): " > /dev/tty
  if [ -d ${cvmfs_area} ]
  then
      csr=${cvmfs_area}/spack/current/NULL/ 
      SPACK_ROOT=$csr $csr/bin/spack find $1 | grep -v '^[=-]' | sed -e 's/[^ ]*@//'| sort -u # | tee /dev/tty
  fi
}

mkdir -p `dirname $dst`

compiler=""
if [ "x`getv2 gcc`" != x ]
then
    compiler="gcc@`getv2 gcc gcc`"
    comp="%$compiler"
else
    comp=""
fi

compiler2=""

if [ "x`getv2 clang clang`" != x ]
then
    compiler2="clang@`getv2 clang clang`"
fi
export compiler
export compiler2

echo "make_packages_yaml: INFO: creating $dst"
exec 3>$dst
echo "packages:" >&3

cat <<EOF >&3
  all:
    compiler:
      - gcc
      - clang
    target:
      - $preferred_target
    providers:
      pbs:
        - torque
      pkgconfig:
        - pkg-config
  blas:
    require: openblas
  fftw-api:
    require: fftw
  go-external-or-gccgo-bootstrap:
    require: go-bootstrap
  gl:
    require: glx
  glu:
    require: mesa-glu
  golang:
    require: go
  iconv:
    buildable: False
    require: libc
  java:
    require: openjdk
  jpeg:
    require: libjpeg-turbo
  lapack:
    require: openblas
  libglx:
    require: mesa+glx
  libllvm:
    require: llvm
  libosmesa:
    require: mesa+osmesa
  mariadb-client:
    require: mariadb-c-client
  mysql-client:
    require:  mariadb-client
  rpc:
    buildable: False
    require: libc
  tbb:
    require: intel-tbb-oneapi
  unwind:
    require: libunwind
  uuid:
    require: libuuid
  yacc:
    require: bison
EOF

preamble() {
  $did_preamble && return
  did_preamble=true
  echo "  $spp:"               >&3
  $want_force_target || return 0
  echo "    require:"     >&3
  echo "      - one_of: [\"target=$preferred_target\"]"     >&3
  [ "x$compiler$compiler2" = x ] && return # Compiler hints
  echo "      - one_of:" >&3
  [ -z "$compiler"  ] || echo "        - \"%$compiler\"" >&3
  [ -z "$compiler2" ] || echo "        - \"%$compiler2\"" >&3
}

for p in `grep -Eve '^[[:space:]]*#' "$src"`
do
  did_preamble=false
  did_externals=false
  want_force_target=false
  dv="$(echo $p | sed -Ee 's/^[^:]*:[^:]*:([^:]*)/\1/')"
  spp="$(echo $p | sed -Ee 's/^[^:]*:([^:]*):[^:]*/\1/')"
  p="$(echo $p | sed -Ee 's/^([^:]*):[^:]*:[^:]*/\1/')"
  case "$p" in
    *[][*+?\(\)]*)
      pr="$p"
      p=`rpm -qa | sed -Ene '/-devel-/ b; s&^('"$p"')-.*&\1&p' | sort -u`
      ;;
    *) pr=
  esac

  # Check if we wish to constrain the target/compilers.
  echo $spp | egrep "$force_x86_64" > /dev/null &&
    want_force_target=true

  # debug individual packages here
  # debug_pkg=gettext
  debug_pkg=
  if [ "$debug_pkg" != "" ]
  then
    if [ "$spp" = "$debug_pkg" ]
    then
      set -x
    else
      set +x
    fi
  fi

  #variants from known variants list
  opts=`grep "^$spp[ \t]" $optf | sed -e "s/^$spp[ \t]*//"`

  #dependencies, one needed so far on gettext
  if [ "$spp" = "gettext" ]
  then
    deps=" ^libc"
  else
    deps=""
  fi

  # some packages aren't on SL7 but are on SL8...
  if [ "$os" = "scientific7" -a "$p" = "z3" ]
  then
    continue
  fi

  # also find any cvmfs versions
  cvmfsversions=`get_cvmfs_spack_versions $spp`

  for pkg in $p
  do
    ##################
    # Ascertain the devel RPM name.
    #
    # Substitute RPM base name...
    case "$dv" in
      *\$0*) dpkg=$(echo "$dv" | sed -Ee 's&\$0&'"$pkg"'&');;
      *) dpkg=$dv
    esac
    # and apply any regex substitutions.
    case "$dpkg" in
      *\\[1-9]*) dpkg=$(echo "$pkg" | sed -Ee 's&'"$pr"'&'"$dpkg"'&');;
    esac
    ##################
    # find local version if any...
    v=`getv2 $pkg $spp`
    if [ "x$v" = x ] # No base rpm
    then
      echo "Notice: no system-installed versions found for $pkg (Spack package $spp)"
      if [ "$pkg" = "$dpkg" ]
      then
        echo "        May want to install rpm: $pkg"
      else
        echo "        May want to install rpms: $pkg and $dpkg"
      fi
    elif [ "$pkg" = "$dpkg" ] || rpm -q "$dpkg" > /dev/null # Check for installed devel rpm
    then
      :
    else
      echo "Notice: no development headers/libraries installed for $pkg (Spack package $spp)"
      echo "        May want to install rpm: $dpkg"
      v=
    fi

    if [ "x$v" != x ]
    then 
      preamble
      sysprefix='/usr'
      # mpich is goofy on RedHat/Centos
      case "$pkg" in
        mpich-*)
          sysprefix="/usr/lib64/$pkg/"
          ;;
      esac
      # use the right external syntax based on spack version in path
      case $SPACK_ROOT in
        *rollout*)
          $did_externals ||
            echo "    paths:"           >&3
          echo "      \"$spp$opts @$v $comp$deps\": $sysprefix"    >&3
          ;;
        *)
          $did_externals ||
            echo "    externals:" >&3
          echo "    - spec: \"$spp$opts @$v $comp os=$os$deps\"" >&3
          echo "      prefix: $sysprefix" >&3
      esac
      did_externals=true
    fi
  done
  for v in $cvmfsversions
  do
    preamble
    #printf "cvmfs $spp $v $os: " > /dev/tty
    # should get info from spack here, not this way...
    cprefix=`ls -d ${cvmfs_area}/$spp/$v/* 2>/dev/null | grep $os | head -1`

    if [ "x$cprefix" = "x" ]
    then
      continue
    fi

    # if we have it in cvmfs, use that one
    case $SPACK_ROOT in
      *rollout*)
        $did_externals ||
          echo "    paths:"           >&3
        echo "      \"$spp @$v $comp$deps\": $cprefix"    >&3
        ;;
      *)
        $did_externals ||
          echo "    externals:" >&3
        echo "    - spec: \"$spp$opts @$v $comp os=$os$deps\"" >&3
        echo "      prefix: $cprefix" >&3
        ;;
    esac
    did_externals=true
  done

  if $did_externals
  then
    echo $spp | egrep "$force_system" > /dev/null &&
    echo "    buildable: False"           >&3
  else
    echo "Notice: no cvmfs versions found for Spack package $spp"
    # Ensure we have an entry if we wish to constrain the target.
    $want_force_target && preamble
  fi
done
