#!/bin/sh

case "x$0" in
x*/*) dir=`echo $0 | sed -e 's;\(.*\)/\([^/]*\);\1/..;'` ;;
x*)   dir=.. ;;
esac

os=${2:-`spack arch -o`}

src=$dir/templates/packagelist
optf=$dir/templates/package_opts
dst=$1/etc/spack/$os/packages.yaml

# packages to make not buildable...
force_system="(bzip2|diffutils|expat|findutils|gdbm|gettext|libdrm|libedit|libgcrypt|libpciaccess|lz4|ncurses|openssl|pcre|pkgconf|pkg-config|readline|tar)"

no_devel='(diffutils|findutils|pkg-config|pkgconfig|tar)'

force_x86_64="(asciidoc|autoconf|autogen|automake|binutils|bison|bzip2|cmake|conv|curl|damageproto|davix|diffutils|environment-modules|expat|findutils|fixesproto|flex|font-util|fontconfig|fontsproto|font-util|libfontenc|libxfont|mkfontdir|mkfontscale|freeglut|freetype|gdb|gdbm|gettext|git|gl2ps|glew|glproto|gmake|help2man|icu4c|jemalloc|libbsd|libdrm|libedit|libevent|libffi|libice|libiconv|libjpeg|libjpeg-turbo|libgcrypt|libpciaccess|libpng|libpthread-stubs|libsigsegv|libsm|libtool|libuuid|libx11|libxau|libxcb|libxdamage|libxdmcp|libxext|libxfixes|libxft|libxi|libxmu|libxpm|libxrandr|libxrender|libxshmfence|libxt|libxv|libxvmc|libxxf86vm|libyaml|lua|lz4|m4|matplotlib|mesa|mesa-glu|mpich|mysql|nasm|ncurses|openblas|openssl|patchelf|pcre|pcre2|perl|pkgconf|pkg-config|presentproto|readline|sqlite|swig|tar|tcl|texinfo|texlive|tk|unzip|util-macros|videoproto|xextproto|xproto|xxhash|xz|zlib)"



runversion() {
   # try to get version by running executable --version
   # in some cases this works due to error messages...
   $1 --version 2>&1 | 
      grep -i $1 | 
      head -1 | 
      egrep -iv 'not found|illegal option' |
      sed -e 's/^.*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*$/\1/'
}
runversion2() {
   # try to get version by running executable --version
   # in some cases this works due to error messages...
   $1 --version 2>&1 | 
      head -1 | 
      egrep -iv 'not found|illegal option' |
      sed -e 's/^.*\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*$/\1/'
}

# define getv depending on platform 
# for linux distros, prefer the apt/rpm version...
case `uname -s` in
Linux)
    case `lsb_release -i` in
    *Ubuntu)
        : ubuntu case
        getv() {
           apt list $1 2>/dev/null | grep '\[installed\]'| sed -e 's/[^ ]* //' -e 's/.*://' -e 's/[+-].*//' || runversion $1
        }
    ;;
    *Scientific*|*Centos*|*RedHat*)
        if [ x$RPMCACHE != x ]
        then
        getv() {
           grep "^$1-[0-9]" $RPMCACHE | tail -1 | grep -v 'is not installed' | sed -e 's/[^-]*-//' -e 's/[a-z][^-]*-//' -e 's/-.*//' || runversion $1
        }
        else
        getv() {
           rpm -q $1 | tail -1 | grep -v 'is not installed' | sed -e 's/[^-]*-//' -e 's/[a-z][^-]*-//' -e 's/-.*//' || runversion $1
        }
        fi
        ;;
    esac
;;
*)
    : generic / darwin case
    getv() {
       case x$1 in
       xautotools)
           runversion automake
           ;;
       xlibtool) 
           # looks like a library, but its not...
           runversion $1
           ;;
       xtcl)
           # its tclsh not tcl, AND it doesn't take --version...
           echo info patchlevel | tclsh
           ;;
       xlib*) 
           otool -L /usr/lib/$1 | grep "$1.*current version" |  sed -e 's/.*version//' -e 's/)//'
           ;;
       x*)
           runversion $1
           ;;
       esac
    }
    ;;
esac

getv2() {
  # more robust getv that does the generic getv, but also tries runversion
  # and runversion2, and finally checking templates/preferred_versions
  # This has some chance of finding, say, UPS packges you have setup, but
  # does help with the whole pkgconf/pkg-config silliness..
  x=`grep $1 $dir/templates/preferred_versions | sed -e 's/.*@//'`
  if [ "$x" = "" ]
  then
      x=`getv $1`
  fi
  if [ "$x" = "" ]
  then
      x=`runversion $1`
  fi
  if [ "$x" = "" ]
  then
      x=`runversion2 $1`
  fi
  if [ "$x" = "" ]
  then
      x=`grep $1 $dir/templates/default_versions | sed -e 's/.*@//'`
  fi
  echo $x | sed -e 's/ .*//'
}

mkdir -p `dirname $dst`

compiler=""
if [ "x`getv2 gcc`" != x ]
then
    compiler="gcc@`getv2 gcc`"
    comp="%$compiler"
else
    comp=""
fi

if [ "x`getv2 clang`" != x ]
then
    compiler="$compiler clang@`getv2 clang`"
fi

echo "make_packages_yaml: INFO: creating $dst"
exec 3>$dst
echo "packages:" >&3

cat <<EOF >&3
  all:
    providers:
      pkgconfig: [pkg-config]
      blas: [openblas]
      lapack: [openblas]
      mpi: [mpich]
      gl: [mesa]
      glx: [mesa]
      glu: [mesa-glu]
      uuid: [unix-linux-uuid, libuuid]
      tbb: [intel-oneapi-tbb, intel-tbb]
EOF

# don't put the compiler tag in, we may not want to build
# with the system compiler by default...
#if [ "x$compiler" != x ]
#then
#    echo "  all:"                     >&3
#    echo "    compiler: [$compiler]"  >&3
#fi

for p in `cat $src`
do
    # find local version if any...
    v=`getv2 $p`
    if [ "x$v" = x ]
    then
        # not found...
        echo "Notice: no version found for package $p"
        continue
    fi
    opts=`grep "^$p\s" $optf | sed -e 's/.*\t//' -e 's/ *$//'`
    lp=`echo $p | tr '[A-Z]' '[a-z]' | sed -e 's/imagemagick/image-magick/' -e 's/^python-/py-/' -e 's/pkgconfig/pkgconf/'`
    echo "  $lp:"               >&3
    echo "    version: [$v]"    >&3
    if [ "x$opts" != "x" ]
    then
        echo "    variants: $opts"     >&3
    fi
    if echo $lp | egrep "$force_x86_64" > /dev/null
    then
        echo "    target: [x86_64]"     >&3
        echo "    compiler: [$compiler]" >&3
    fi
    cprefix=`ls -d /cvmfs/fermilab.opensciencegrid.org/packages/external/$lp/$v/*-$os-x86_64-* 2>/dev/null | head -1`
    if echo $lp | egrep "$force_system" > /dev/null
    then
        # use the right external syntax based on spack version in path
        case $SPACK_ROOT in
        *rollout*)
            echo "    paths:"           >&3
            echo "      \"${lp} @$v $opts $comp\": /usr"    >&3
            ;;
        *)
            echo "    externals:" >&3
            echo "    - spec: \"${lp} @$v $opts $comp\"" >&3
            echo "      prefix: /usr" >&3
        esac
        echo "    buildable: False"           >&3


        # there isnt a curl-devel, but there is a libcurl-devel
        p=`echo $p | sed  -e s/curl/libcurl/`
        (echo $p | egrep "$no_devel" >/dev/null) ||
		rpm -q $p-devel  > /dev/null || 
		echo "Need to install rpm: $p-devel"

    elif [ -d "$cprefix" ]
    then   
        # if we have it in cvmfs, use that one
        case $SPACK_ROOT in
        *rollout*)
            echo "    paths:"           >&3
            echo "      \"$lp @$v $opts $comp\": $cprefix"    >&3
            ;;
        *)
            echo "    externals:" >&3
            echo "    - spec: \"${lp} @$v $opts $comp\"" >&3
            echo "      prefix: $cprefix" >&3
            ;;
        esac
        echo "    buildable: False" >&3
    fi
done

