#!/bin/bash 

# pull down spack-infrastructure and use it to install spack

usage() {
  cat <<EOF
usage: bootstrap [options] [dest_dir] 
  options:
        --help                              Print this message
        --with_padding                      Set padding in spack config
        --spack_infrastructure_release ver  fetch the labeled version of spack_infrastructure
        --spack_infrastructure_repo url     ...from this git reposity
        --spack_release ver                 fetch the labeled version of spack_infrastructure
        --spack_repo url                    ...from this git repository
   dest_dir defaults to current directory
EOF
}
# note, other scripts pull these values for defaults
default_spack_infrastructure_version=master
default_spack_version=v0.19.fermi
default_spack_repo=https://github.com/FNALssi/spack.git
default_spack_infrastructure_repo=https://github.com/FNALssi/spack-infrastructure.git

parse_args() {
    with_padding=""
    eval set : $(getopt --longoptions with_padding,help,spack_infrastructure_release:,spack_release:,spack_repo:,spack_infrastructure_repo: -- x "$@")
    shift
    spack_repo=$default_spack_repo
    spack_infrastructure_repo=$default_spack_infrastructure_repo
    ver=$default_spack_infrastructure_version
    spack_version=$default_spack_version
    while [ "${1:0:2}" = "--" ]
    do
        case "x$1" in
        x--with_padding)                 with_padding="--with_padding"; shift;;
        x--spack_release)                spack_version=$2; shift; shift ;;
        x--spack_repo)                   spack_repo=$2; shift; shift ;;
        x--spack_infrastructure_release) ver=$2; shift; shift ;;
        x--spack_infrastructure_repo)    spack_infrastructure_repo=$2; shift; shift ;;
        x--help) usage; exit;;
        x--) shift; break;;
        esac
    done
    dest=${1:-$PWD}
}

detail_log() {
    logfile=/tmp/bootstrap$$.log 
    # use fd 3 for messages to user, send stdout and stderr to log
    # redirect stdin from /dev/null, so anything that tries to prompt
    # for input will fail and not hang because no message gets to the user
    exec 3>&1 > $logfile 2>&1 < /dev/null
    echo "Putting detail log in /tmp/bootstrap$$.log" >&3 
}

monitor() {
   local f=$1
   local sd=$2
   local box="[                                                  ]"
   local lin="[==================================================]"

   printf "%3d%%$box\r" 0 >&3
   while :
   do
       local duf=$(du -b $f)
       local ds="${duf%$f}"
       dpp1=$(( ds / sd ))
       (( dpp1 > 99 )) && dpp1=99
       dpp2=$(( dpp1 / 2 + 1 ))
       printf "%3d%%${lin:0:$dpp2}\r" $dpp1 >&3
       sleep 2
   done
}
start_monitor() {
  monitor $* &
  monitor_pid=$!
  trap "stop_monitor" EXIT
}
stop_monitor() {
  (( monitor_pid )) && kill $monitor_pid
  wait
  clr="                                                         "
  printf "\r$clr\r" >&3
}
message() {
    stop_monitor
    echo $* >&3
    start_monitor $logfile 458
}

check_bootstrap() {
    if [ `spack find | egrep 'patchelf|spack-infrastructure' | wc -l` = 2 ]
    then
        :
    else
        message "Bootstrap did NOT complete properly, please attach logfile to a Servicedesk ticket"
        exit 1
    fi
}

main() {
    parse_args "$@"

    detail_log
    mkdir -p $dest/spack-infrastructure/$ver
    cd $dest

    message "Cloning FNALssi spack-infrastructure repository"
    git clone -b $ver $spack_infrastructure_repo spack-infrastructure/$ver/NULL/

    PATH=$dest/spack-infrastructure/$ver/NULL/bin:$PATH

    message "Setting up with make_spack"
    make_spack --spack_release $spack_version --spack_repo $spack_repo $with_padding --minimal -u $dest

    message "Finding compilers"
    source $dest/setup-env.sh

    spack compiler find --scope=site

    cd $dest/spack-infrastructure/$ver/NULL && bin/declare_simple spack-infrastructure $ver

    check_bootstrap
}

main "$@"
status=$?
stop_monitor
exit $status
