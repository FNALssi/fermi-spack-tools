#!/bin/sh

# make a sub-spack repository
# ...but make it unified layout...

find_ourselves() {
    spackbindir=`echo $0 | sed -e 's;make_subspack$;;' `
    case x$spackbindir in
    x/*) ;;
    x*)  spackbindir="$PWD/$spackbindir"
    esac
}

get_from_bootstrap() {
    grep "^$1=" $spackbindir/bootstrap | sed -e 's/.*=//' -e 's/["'"']//g"
}


usage() {
        echo "usage: make_subspack [options] [-t|-u] path/to/existing/spack /path/to/new/area"
        echo " options are:"
	echo "--without_caches    disable buildcache mirrors"
        echo "--with_padding      enable directory padding in config"
        echo "--spack_release xx  install spack release xx, 'upstream' for same as source"
        echo "--spack_repo url    use spack repo url, 'upstream' to clone spack from source"
        echo "--local_env name     make a local version of 'name' called 'name_local'"
        echo "--dev_pkgs p1:p2... make packages p1, p2, ... development in above"
        echo "-v                  verbose"
        echo "-t                  traditional layout"
        echo "-u                  unified layout (deprecated)"
        echo "-p                  plain layout (default)"
}

parse_args() {
    local_env=""
    dev_pkgs=""
    spack_repo=default
    spack_release=default
    padding=false
    verbose=false
    plain=false

    if x=$(getopt --longoptions without_caches,with_padding,spack_release:,spack_repo:,local_env:,dev_pkgs: --options vtup -- "$@")
    then
        echo "here: $*"
        eval set : $x 
        shift
    else
        usage
        exit 1
    fi

    while echo x$1 | grep x- > /dev/null
    do
        case "x$1" in
        x--without_caches)  disable_caches=true; shift ;;
        x--with_padding)  padding=true; shift ;;
        x--spack_release) spack_release=$2; shift; shift;;
        x--spack_repo)    spack_repo=$2; shift; shift;;
        x--local_env)      local_env=$2; shift; shift;;
        x--dev_pkgs)      dev_pkgs=$2; shift; shift;;
        x-t) unified=false; shift ;;
        x-u) unified=true; shift ;;
        x-p) plain=true; unified=false; shift ;;
        x-v) verbose=true; shift ;;
        x--) shift; break;;
        esac
    done


    if [ $# != 2 ]
    then
        usage
        exit 1
    fi

    src=$1
    dst=$2

    case "$spack_release" in
    rollout*) extra="";;
    *)        extra=".new";;
    esac
}


process_args() {
    if [ ${spack_repo} = default ]
    then
       spack_repo=$(get_from_bootstrap default_spack_repo)
    fi 

    if [ ${spack_release} = default ]
    then
        spack_release=$(get_from_bootstrap default_spack_version)
    fi

    if [ ${disable_caches} ]
    then
        args="$args --without-caches"
    fi
    if [ ${padding} ]
    then
        args="$args --with-padding"
    fi
    if [ $spack_repo != upstream ]
    then
        if [ $spack_repo = default ]
        then
            spack_repo=$(get_from_bootstrap default_spack_repo)
        fi
        args="$args --remote $spack_repo"
    fi
    if [ $spack_release != upstream ]
    then
        if [ $spack_release = default ]
        then
            spack_release=$(get_from_bootstrap default_spack_version)
        fi
        args="$args --remote-branch $spack_release"
    fi
}

get_subspack_if_needed() {
    # if our spack instance doesn't have the extension, clone a copy
    # and make a config.yaml that adds it, and set ssopts to the
    # spack options to include that config.yaml.
    repo="https://github.com/FNALssi/spack-subspack.git"
    if spack subspack --help > /dev/null 2>&1
    then
        ssopts=""
        ssd=""
    else
        ssd="${TMPDIR:-/tmp}/${USER}_ssd"
        if [ \! -d ${ssd} ]
        then
            mkdir ${ssd}
            git clone --depth 1 $repo $ssd/spack-subspack
        fi
        cat  > $ssd/config.yaml <<EOF
config:
  extensions:
  - $ssd/spack-subspack
EOF
        ssopts="--config-scope $ssd"
    fi
}

cleanup() {
   # clean out our copy of spack-subspack...
   if [ -n "$ssd" -a -d "$ssd" ]
   then
       echo rm -rf $ssd
   fi
}

run_spack_subspack() {
    source $src/setup-env.sh
    get_subspack_if_needed
    echo Running spack subspack $args $dst
    spack $ssopts subspack $args $dst

    cleanup
}

find_ourselves 
parse_args "$@"
process_args
run_spack_subspack
