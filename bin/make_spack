#!/bin/bash

#
# Script to make a Fermi-ized spack repository
#
find_ourselves() {
    spackbindir=`echo $0 | sed -e 's;make_spack$;;' `
    case x$spackbindir in
    x/*) ;;
    x*)  spackbindir="$PWD/$spackbindir"
    esac
}

clone_repos() {
    while read ddir branch repo
    do
      if [ -e "$ddir/.git" ]; then
        if [ "$repo" = "$spack_repo" ] ; then
          repo_type=spack
        elif [[ "${ddir#$dir/}" == etc/* ]]; then
          repo_type=etc
        elif [[ "${ddir#$dir/var/spack/}" == extensions/* ]]; then
          repo_type=extensions
        else
          unset repo_type
        fi
        if [ -n "$repo_type" ]; then
          eval "upgrade_repo=\$upgrade_$repo_type"
        else
          unset upgrade_repo
        fi
        current_branch=$(git -C "$ddir" branch --show-current)
        if (( upgrade_repo )); then
          if [ "$current_branch" = "$branch" ]; then
            if $verbose; then
              echo "$(date --iso-8601=seconds) Updating Git repository at $ddir"
            fi
            if ! git -C "$ddir" pull; then
              echo "$(date --iso-8601=seconds) Unable to update Git repository at" 1>&2
              echo "$(date --iso-8601=seconds)   $ddir" 1>&2
              echo "$(date --iso-8601=seconds) Fix manually" 1>&2
            fi
          else
            echo "$(date --iso-8601=seconds) Refusing to update Git repository from branch $current_branch to $branch at" 1>&2
            echo "$(date --iso-8601=seconds)   $ddir" 1>&2
            echo "$(date --iso-8601=seconds) Fix manually" 1>&2
          fi
        else
          echo "$(date --iso-8601=seconds) Using existing repository on branch $current_branch at "
          echo "$(date --iso-8601=seconds)   $ddir"
          echo "$(date --iso-8601=seconds) U${repo_type:+se --upgrade-$repo_type or u}pgrade manually"
        fi
      else
        if $verbose; then
          echo "$(date --iso-8601=seconds) Cloning Git repository on branch $branch at"
          echo "$(date --iso-8601=seconds)   $ddir"
        fi
        if ! git clone -b $branch --depth $depth $repo $ddir; then
          echo "$(date --iso-8601=seconds) Unable to clone Git repository on branch $branch at" 1>&2
          echo "$(date --iso-8601=seconds)   $ddir" 1>&2
          echo "$(date --iso-8601=seconds) Fix manually" 1>&2
        fi
      fi
    done <<EOF
        $dir                                            $spack_release  $spack_repo
        $dir/etc/spack/linux                            main            https://github.com/marcmengel/fermi-etc-spack-linux.git
        $dir/var/spack/extensions/spack-freeze          main            https://github.com/marcmengel/spack-freeze.git
        $dir/var/spack/extensions/spack-installdir      main            https://github.com/marcmengel/spack-installdir.git
        $dir/var/spack/extensions/spack-intersection    main            https://github.com/marcmengel/spack-intersection.git
        $dir/var/spack/extensions/spack-linuxexternals  main            https://github.com/marcmengel/spack-linuxexternals.git
        $dir/var/spack/extensions/spack-localbuildcache main            https://github.com/marcmengel/spack-localbuildcache.git
        $dir/var/spack/extensions/spack-subspack        main            https://github.com/marcmengel/spack-subspack.git
        $dir/var/spack/extensions/spack-mpd             main            https://github.com/FNALssi/spack-mpd.git
        $dir/var/spack/extensions/spack-subspack        main            https://github.com/marcmengel/spack-subspack.git
        $dir/var/spack/repos/fnal_art                   develop         https://github.com/FNALssi/fnal_art.git
        $dir/var/spack/repos/scd_recipes                master          https://github.com/marcmengel/scd_recipes.git
        $dir/var/spack/repos/nusofthep-spack-recipes    main            https://github.com/NuSoftHEP/nusofthep-spack-recipes.git
        $dir/var/spack/repos/larsoft-spack-recipes      main            https://github.com/LArSoft/larsoft-spack-recipes.git
        $dir/var/spack/repos/artdaq-spack               develop         https://github.com/art-daq/artdaq-spack.git
EOF
}


add_fermi_setups() {

   #
   # * symlink setup-env.{csh,sh} to $SPACK_ROOT
   # * set SPACK environment variables we want
   #

   echo source $dir/share/spack/setup-env.sh >  $dir/setup-env.sh
   echo source $dir/share/spack/setup-env.csh > $dir/setup-env.csh

   while read var val
   do
      echo setenv $var $val >> $dir/share/spack/setup-env.csh
      echo export $var=$val >> $dir/share/spack/setup-env.sh
   done <<EOF
      SPACK_SKIP_MODULES                true
      SPACK_DISABLE_LOCAL_CONFIG        true
EOF
    # source the setup...
    source $dir/share/spack/setup-env.sh
}

do_padding() {
    if $padding; then
        echo "turning on padding."
        spack config --scope=site add config:install_tree:padded_length:255
    else
        spack config --scope=site rm config:install_tree:padded_length
    fi
}

query_packages() {
   if $query_packages; then
       osstr=$(spack arch -o)
       spack linuxexternals --scope=site/linux/$osstr
   fi
}

usage() {
        echo "Usage: $0 [options] -[utp] /base/directory"
        echo " options:"
        echo "  --upgrade (deprecated, ignored)"
        echo "  --upgrade-etc"
        echo "  --upgrade-extensions"
        echo "  --upgrade-spack"
        echo "  --no-buildcache"
        echo "  --query-packages"
        echo "  --spack_release ver"
        echo "  --spack_repo url"
        echo "  --depth n"
        echo "  --minimal"
        echo "  --verbose"
        echo "  -u fermi 'unified' layout (deprecated)"
        echo "  -t fermi 'traditional' layout (deprecated)"
        echo "  -p plain spack default layout (deprecated)"
        echo "  -m minimal setup"
        echo "  -v verbose flag"
        echo ""
        echo "  make a spack instance with given layout"
        echo "  --query-packages turns on running make_packages_yaml (slow)"
        echo "  --depth is passed to git clone calls (default 1)"
        exit 1
} 1>&2

get_from_bootstrap() {
    grep "^$1=" $spackbindir/bootstrap | sed -e 's/.*=//'
}

parse_args() {
    spack_repo=$(get_from_bootstrap default_spack_repo)
    spack_release=$(get_from_bootstrap default_spack_version)
    use_buildcache=true
    minimal=false
    upgrading=false
    padding=false
    layout=unified
    query_packages=false
    repovers=""
    verbose=false
    depth=1

    origargs="$*"
    if x=$(getopt --longoptions help,depth,with_padding,upgrade,upgrade-etc,upgrade-extensions,upgrade-spack,spack_release:,minimal,no_buildcache,repover,spack_repo:,query-packages,verbose --options mptuv -- "$@")
    then
        eval set : $x
        shift
    else
        usage
        exit 1
    fi
    while echo x$1 | grep x- > /dev/null
    do
        case "x$1" in
        x--depth)               depth=$2; shift;;
        x--with_padding)        padding=true; shift ;;
        x--upgrade)             echo "Deprecated option --upgrade ignored: use --upgrade-{etc,extensions,spack} ";  shift;;
        x--upgrade-*)           eval upgrade_${1##*-}=1; shift;;
        x--spack_release)       spack_release=$2; shift; shift ;;
        x--spack_repo)          spack_repo=$2; shift; shift;;
        x--minimal)             minimal=true; shift ;;
        x--query-packages)      query_packages=true; shift ;;
        x--help)                usage; exit;;
        x--no_buildcache)       use_buildcache=false; shift;;
        x--repover)             repovers="$repovers $2"; shift; shift;;
        x-v|x--verbose)         verbose=true; shift;;
        x-u)                    echo "Deprecated option -u ignored"; shift;;
        x-t)                    echo "Deprecated option -t ignored"; shift;;
        x-p)                    echo "Deprecated option -p ignored (-p is already the default behavior)" ; shift;;
        x-m)                    echo "Deprecated option -m ignored"; shift;;
        x--)                    shift; break;;
        esac
    done

    dir=$1
    if [ -z "$dir" ]
    then
        usage
        exit 1
    fi
    if $verbose
    then
        echo "$(date --iso-8601=seconds) Starting make_spack $origargs"
        set -x
    fi
}

do_spack_bootstrap() {
    osstr=$(spack arch -o)
    spack bootstrap root $dir/.bootstrap.$osstr
    spack bootstrap now
    spack buildcache keys --install --force --trust
}

main() {

    : starting: $*
    find_ourselves
    parse_args "$@"

    clone_repos
    add_fermi_setups
    do_padding
    do_spack_bootstrap
    query_packages
}

main "$@"
