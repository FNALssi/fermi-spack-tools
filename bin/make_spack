#!/bin/bash


spackbindir=`echo $0 | sed -e 's;make_spack;;' `
case x$spackbindir in
x/*) ;;
x*)  spackbindir="$PWD/$spackbindir"
esac

#
# binary cache to use
#
binary_cache=https://spack-cache-1.fnal.gov/binaries/
binary_cache_bak=https://scisoft.fnal.gov/spack-mirror/

install_latest() {
    pkg="$1"
    if $use_buildcache
    then 
        hash_pkg_ver=`spack -k buildcache list --long --allarch "$pkg $plat" | tail -1`
        echo "make_spack: info: latest $pkg is $hash_pkg_ver"
        hash=`echo $hash_pkg_ver | sed -e 's/ .*//'`
        spack -k buildcache install -o -a -m "/$hash"
    else
        spack -k install "$pkg $plat"
    fi
}

#
# Spack needs patchelf installed to do binary installs:
# which creates a catch-22 when trying to do a binary install of patchelf.
# However, it turns out we don't *actually* need to patchelf patchelf itself, 
# as it only relies on system libraries.
# So we can lie to spack about there being a system patchelf long enough to
# install patchelf, and then take the lie away.
#
# I have a patch for spack that obviates this... then you can just
# install with spack buildcache install patchelf...
#

bootstrap_patchelf() {

    #
    # under 0.17 we need patchelf to bootstrap clingo etc, so we just 
    # snag the binary and then install it "properly"...
    #

    pdir=/tmp/pth$$
    export pdir
    mkdir $pdir
    PATH="$pdir:$PATH"
    (curl -OJL --max-redirs 0 --silent --fail $binary_cache/bootstrap/patchelf.linux-scientific7-x86_64 || curl -OJL --max-redirs 0 --silent --fail  $binary_cache_bak/patchelf.linux-scientific7-x86_64) || (echo "patchelf bootstrap download failed"; exit 111)
    mv patchelf.linux-scientific7-x86_64 $pdir/patchelf

    chmod +x $pdir/patchelf

    spack -d spec zlib
    install_latest patchelf

    rm -rf $pdir

    patchelf_dir=`spack find --paths patchelf | tail -1 | sed -e 's/.* //'`
    PATH="$patchelf_dir/bin:$PATH"
}

find_compilers() {
   source $SPACK_ROOT/share/spack/setup-env.sh
   spack compiler find --scope=site
}

bootstrap_spack() {
    bootstrap_patchelf
    find_compilers
    if echo $spack_release | grep rollout > /dev/null
    then
        install_latest environment-modules
        install_latest lmod
    fi
    if $minimal
    then
        :
    else
        install_latest py-machotools
    fi
    make_packages_yaml $SPACK_ROOT
}

add_recipe_repos() {
    git clone https://github.com/FNALssi/fnal_art.git $SPACK_ROOT/var/spack/repos/fnal_art
    spack repo add --scope=site $SPACK_ROOT/var/spack/repos/fnal_art

    git clone https://github.com/marcmengel/scd_recipes.git $SPACK_ROOT/var/spack/repos/scd_recipes
    spack repo add --scope=site $SPACK_ROOT/var/spack/repos/scd_recipes

    spack repo create $SPACK_ROOT/var/spack/repos/ups_to_spack
    spack repo add --scope=site $SPACK_ROOT/var/spack/repos/ups_to_spack
}

create_spack() {
    d=`dirname $SPACK_ROOT`
    b=`basename $SPACK_ROOT`
    mkdir -p $d
    if cd $d
    then 
        case "$spack_root" in
        *github.com*) args="--depth 4" ;;
        *) args="";;
        esac
        git clone $args  -b $spack_release $spack_repo $b

        if cd $b
        then 
            echo "make_spack: INFO: running: $add_config"
            eval "$add_config"
            spack config --scope=site update  --yes-to-all config
            case $spack_release in
            rollout*|0.1[67]*) ;;
            *) $padding && 
               echo "turning on padding." && 
               echo "    padded_length: 255" >> $SPACK_ROOT/etc/spack/config.yaml;;
            esac
            export plat="target=`uname -i` os=`spack arch --operating-system`"
            spack mirror add --scope site fnal $binary_cache
            spack buildcache update-index  -d $binary_cache
            spack mirror add --scope site scisoft $binary_cache_bak
            spack buildcache update-index  -d $binary_cache_bak
            spack -k buildcache keys --install --trust --force
            add_recipe_repos
            if $upgrading
            then
                spack reindex
            else
                bootstrap_spack
            fi
        else
            echo "echo make_spack: ERROR: Unable to git clone $spack_repo as $b" >&2
            echo "FAILED"
            exit 1
        fi
    else
        echo "make_spack: ERROR: Unable to make/change directories to $d" >&2
        echo "FAILED"
        exit 1
    fi
}

make_absolute() {
   case x$1 in
   x.)   echo $PWD;;
   x./*) echo $PWD/$1;;
   x/*)  echo $1;;
   *)    echo $PWD/$1;;
   esac
}

#
# where to git clone spack from, and what branch/release
#
#spack_repo=https://cdcvs.fnal.gov/projects/spack-infrastructure-spack

usage(){
        echo "Usage: $0 [options] -[utp] /base/directory"
        echo " options:"
        echo "  --upgrade"
        echo "  --no-buildcache"
        echo "  --spack_release ver"
        echo "  --minimal"
        echo "  make a spack instance with given layout"
        echo ""
        echo "  -u fermi 'unified' layout"
        echo "  -t fermi 'traditional' layout"
        echo "  -p plain spack default layout"
        echo "  -m minimal setup"
        exit 1
}

get_from_bootstrap() {
    grep "^$1=" $spackbindir/bootstrap | sed -e 's/.*=//'
}

parse_args() {
    spack_repo=https://github.com/FNALssi/spack.git

    spack_release=$(get_from_bootstrap default_spack_version)
    use_buildcache=true
    minimal=false
    upgrading=false
    padding=false
    layout=unified

    eval set : $(getopt --longoptions with_padding,upgrade,spack_release:,minimal,no_buildcache --options mptu -- : "$@")
    shift
    while echo x$1 | grep x- > /dev/null
    do
        case "x$1" in
        x--with_padding)        padding=true; shift ;;
        x--upgrade)             upgrading=true; shift;;
        x--spack_release)       spack_release=$2; shift; shift ;;
        x--minimal)             minimal=true; shift ;;
        x--no_buildcache)       use_buildcache=false; shift;;
        x-u)                    layout=unified; shift;;
        x-t)                    layout=traditional; shift;;
        x-p)                    layout=plain; shift;;
        x-m)                    minimal=true; shift;;
        x--)                    shift; break;;
        esac
    done

    dir=$2
}

main() {
    parse_args "$@"

    case $layout in
    plain)
        echo "make_spack: INFO: Setting up for plain spack in $dir..."
        export SPACK_ROOT=`make_absolute $dir`
        mkdir -p "$SPACK_ROOT" 
        if [ ! -d "$SPACK_ROOT" -o ! -w "$SPACK_ROOT" ]
        then
            echo "make_spack: ERROR: Unable to make writable directory '$SPACK_ROOT'" >&2
            echo "FAILED" >&2
            exit 1
        fi
        if $padding
        then
            add_config='printf "config:\n  install_tree:\n" > $SPACK_ROOT/etc/spack/config.yaml'
        else
            add_config=:
        fi
        ;;
    traditional)
        echo "make_spack: INFO: setting up for traditional ups layout under $dir"
        do_setup_env=true
        dir=`make_absolute "$dir"`
        mkdir -p "$dir" 
        if [ ! -d "$dir" -o ! -w "$dir" ]
        then
            echo "make_spack: ERROR: Unable to make writable directory '$dir'" >&2
            echo "FAILED" >&2
            exit 1
        fi
        export SPACK_ROOT=$dir/prd/spack/$spack_release/NULL

        export add_config="cp $spackbindir/../templates/config.yaml.traditional${extra} $SPACK_ROOT/etc/spack/config.yaml"
        add_config="$add_config; cp $spackbindir/../templates/modules.yaml.unified $SPACK_ROOT/etc/spack/modules.yaml"
        ;;
     unified)
        echo "make_spack: INFO: setting up for unified layout under $dir"
        do_setup_env=true
        dir=`make_absolute "$dir"`
        mkdir -p "$dir" 
        if [ ! -d "$dir" -o ! -w "$dir" ]
        then
            echo "make_spack: ERROR: Unable to make writable directory '$dir'" >&2
            echo "FAILED" >&2
            exit 1
        fi
        export SPACK_ROOT=$dir/spack/$spack_release/NULL

        export add_config="cp $spackbindir/../templates/config.yaml.unified${extra} $SPACK_ROOT/etc/spack/config.yaml"
        add_config="$add_config; cp $spackbindir/../templates/modules.yaml.unified $SPACK_ROOT/etc/spack/modules.yaml"
      ;;
    esac

    export PATH=$SPACK_ROOT/bin:$PATH
    create_spack

    if [ -n "$dir" ]; then
      rm -f $dir/spack/current
      ln -s $dir/spack/$spack_release $dir/spack/current
    fi

    # save setup-env creation/update till the end so if we're upgrading and it
    # dies, we don't change it until the end.

    if [ -n "$do_setup_env" ]; then
        echo ". $SPACK_ROOT/share/spack/setup-env.sh" > $dir/setup-env.sh
        echo "export SPACK_DISABLE_LOCAL_CONFIG=true" >> $dir/setup-env.sh
        echo "export SPACK_USER_CACHE_PATH=$dir/tmp" >> $dir/setup-env.sh

        echo "source $SPACK_ROOT/share/spack/setup-env.csh" > $dir/setup-env.csh
        echo "setenv SPACK_DISABLE_LOCAL_CONFIG true" >> $dir/setup-env.csh
        echo "setenv SPACK_USER_CACHE_PATH $dir/tmp" >> $dir/setup-env.csh
        mkdir -p $dir/tmp
    fi
}
main "$@"
